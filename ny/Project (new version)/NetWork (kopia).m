%% SSY198: Image Analysis 
%  Project 1: Digit Recognition (revised version) 
%  Done by Saltykova Ekaterina 
%  08.05.2020


%%
clc, clear

% upload MNIST data 
data = load('mnist.mat');


% converting unit8 to double 
data_trainX = double(data.trainX');
data_trainY = double(data.trainY');
data_testX = double(data.testX');
data_testY = double(data.testY');


% splitting training data to training and validation sets (75% - training,
% 25% - validation)

% training set 
trainImages = data_trainX(:,1:0.75*length(data_trainX));
trainLabels = data_trainY(1:0.75*length(data_trainY),1);

% validation set
validImages = data_trainX(:,1:0.25*length(data_trainX));
validLabels = data_trainY(1:0.25*length(data_trainY),1);

%% Reshaping data sets to 4D-matrixes 

imageDim = 28;

% training set
trainImages = reshape(trainImages, imageDim, imageDim, 1, []);
trainImages = trainImages/255; 
trainLabels = categorical(trainLabels);

imaage= trainImages(:,:,1,25);
figure(1)
imshow(imaage)
%imaage_v = 1 - imaage;
%figure(2)
%imshow(imaage_v)

% validation set 
validImages = reshape(validImages, imageDim, imageDim, 1, []);
validImages = validImages/255;
validLabels = categorical(validLabels);

% testing set 
testImages = reshape(data_testX, imageDim, imageDim, 1, []);
testImages = testImages/255;
testLabels = categorical(data_testY);
%testLabels = data_testY;

%% Convolutional Neural Network 

% Define CNN architecture 
layers = [...
    imageInputLayer([28 28 1], 'Normalization', 'none'); % image input 28x28, no normalization of the input data 
    convolution2dLayer(5,10); 
    batchNormalizationLayer();    
    reluLayer();
    
    maxPooling2dLayer(2,'Stride',2);  
    
    convolution2dLayer(3,10);  
    batchNormalizationLayer();
    reluLayer();
    
    maxPooling2dLayer(2,'Stride',2);
    
    convolution2dLayer(3,10);  
    batchNormalizationLayer();
    reluLayer();
    
    
    convolution2dLayer(3,10);  
    batchNormalizationLayer();
    reluLayer();
   
    %transposedConv2dLayer(1,10);
    %transposedConv2dLayer(2,10,'Stride',2,'Cropping',1);
    averagePooling2dLayer(1);
    softmaxLayer();
    pixelClassificationLayer()];  

% Define training options 
% Should reconsider all the options again
options = trainingOptions('sgdm',...
    'ExecutionEnvironment','auto',...
    'InitialLearnRate', 0.1,...
    'LearnRateSchedule','piecewise',...
    'LearnRateDropFactor',0.5,...
    'LearnRateDropPeriod',1,...
    'ValidationData',{validImages,validLabels},...
    'ValidationFrequency',50,...
    'ValidationPatience',6,...
    'MaxEpochs',2,...
    'MiniBatchSize',32);

% Training the network 

net = trainNetwork(trainImages, trainLabels, layers, options); 

% Get predictions
pred = classify(net,testImages);

% Accuracy of the network 
%net_accuracy = sum(pred == testLabels)/length(testLabels)*100;

net_accuracy = sum(pred == testLabels)/numel(testLabels)*100;

%% Saving the network 

save('CNN_Network', 'net')

%% Recognizing digits from the provided pictures 

%network = load('CNN_Network.mat');

%net = network.net;


% read provided image as a grayscale  
%image1 = read_as_grayscale('handwritten.png');
%image1 = read_as_grayscale('handwritten.png');

%img = imread('сomputer_generated.png');
%figure(1)
%imshow(img)

%img_gray = rgb2gray(img);
%figure(2)
%imshow(img_gray)

img_gray2 = read_as_grayscale('handwritten.png');
imag = read_as_grayscale('computer_generated.png');

imag_rev = 1 - imag; 

%imshow(imag_rev)

% resize image - do upsampling 


img_scaled = imresize(imag_rev, 1.2);
%figure(2)
%imshow(img_scaled)

[a, b] = semanticseg(img_scaled, net);

A = imresize(a, [768 1024],'nearest');
B = imresize(b, [768 1024], 'nearest'); 

th = B(1,1);

B_tr = B>=th;

B_new = B;
B_new(B_new>=th) = 0; 
%B = labeloverlay(labl, img_scaled);
%figure(3)
%imshow(B)













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































