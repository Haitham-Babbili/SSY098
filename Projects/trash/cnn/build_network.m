function net = build_network()
%%BUILD_MY_NETWORK Build a 10-layer network.
%   Output:
%   - net : the 10-layer network for training patch in 35x35, in each layer
%     #1  CONV 6 x 6 x 3 x 30
%     #2  RELU
%     #3  MAX POOLING
%     #4  CONV 6 x 6 x 30 x 50
%     #5  RELU
%     #6  MAX POOLING
%     #7  CONV 4 x 4 x 50 x 500
%     #8  RELU
%     #9  CONV 2 x 2 x 500 x 6
%     %10 SOFTMAXLOSS
% Author: Qixun Qu

% Set the number of filers of some layers
conv1_num = 30;
conv2_num = 50;
conv3_num = 500;

f = 1 / 6;

net.layers = {};

net.layers{end+1} = ... 
       struct('type', 'conv', ...
              'weights', {{f*randn(6,6,3,conv1_num,'single')/sqrt(6*6), zeros(1,conv1_num,'single')}}, ...
              'stride', 1, ...
              'pad', 0);

net.layers{end+1} = struct('type', 'relu');

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0);
                       
net.layers{end+1} = ... 
       struct('type', 'conv', ...
              'weights', {{f*randn(6,6,conv1_num,conv2_num,'single')/sqrt(6*6*conv1_num), zeros(1,conv2_num,'single')}}, ...
              'stride', 1, ...
              'pad', 0);

net.layers{end+1} = struct('type', 'relu');

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0);
                       
net.layers{end+1} = ... 
       struct('type', 'conv', ...
              'weights', {{f*randn(4,4,conv2_num,conv3_num,'single')/sqrt(4*4*conv2_num), zeros(1,conv3_num,'single')}}, ...
              'stride', 1, ...
              'pad', 0);

net.layers{end+1} = struct('type', 'relu');

net.layers{end+1} = ... 
       struct('type', 'conv', ...
              'weights', {{f*randn(2,2,conv3_num,6,'single')/sqrt(2*2*conv3_num), zeros(1,6,'single')}}, ...
              'stride', 1, ...
              'pad', 0);
          
net.layers{end+1} = struct('type', 'softmaxloss');

net = vl_simplenn_tidy(net);

end